{"version":3,"sources":["state/user/types.ts","appconfig.ts","globals/index.ts","state/user/index.ts","state/location/types.ts","components/user/LoginScreen.tsx","components/WelcomeScreen.tsx","components/user/CreateAccountScreen.tsx","components/Navbar.tsx","state/location/index.ts","components/MainScreen.tsx","components/Error.tsx","components/user/ConfirmAccountScreen.tsx","components/Loading.tsx","components/user/ForgotPasswordScreen.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["UserErrorTypes","UserSuccessTypes","Status","appconfig","hasPrefix","action","prefix","type","startsWith","isPendingAction","endsWith","isPending","isRejectedAction","isRejected","isFulfilledAction","isFulfilled","getErrorMsg","error","USER_NOT_EXIST","BAD_CONFIRMATION","BAD_EMAIL","BAD_PHONE_NUMBER","EMAIL_EXIST","EMAIL_NOT_CONFIRMED","FIELD_NULL","INCORRECT_PASSWORD","TOKEN_EXPIRED","USER_EXIST","JSON","stringify","Colors","brand","brand2","brand3","brand4","brand5","loadUser","serializedObject","localStorage","getItem","parse","match","map","hex","parseInt","code","text","process","split","c","charCodeAt","reduce","a","b","charCode","String","fromCharCode","join","e","console","log","saveUser","user","textToChars","n","Number","toString","substr","cipher","setItem","axios","interceptors","request","use","req","LocationSuccessTypes","login","createAsyncThunk","thunkAPI","username","password","post","baseUrl","then","response","data","catch","err","message","userId","payload","user_id","firstName","first_name","lastName","last_name","email","phoneNumber","phone_number","status","token","confirmed","enabled","success","rejectWithValue","createUser","confirmPassword","confirm_pass","SAFE","USER_CREATED","confirmEmail","get","USER_CONFIRMED","forgotPassword","FORGOT_EMAIL","changeStatus","getState","currentUser","access_token","headers","STATUS_CHANGE","checkAccess","_","thunkApi","undefined","USER_LOGGED_IN","initialState","loggedIn","loading","userSlice","createSlice","name","reducers","logout","state","removeItem","removeSavedUser","removeError","extraReducers","builder","addCase","fulfilled","addMatcher","userReducer","reducer","actions","useState","setUsername","setPassword","dispatch","useDispatch","history","useHistory","connected","useSelector","useEffect","push","Box","animation","duration","Heading","Form","onSubmit","onReset","FormField","label","TextInput","id","value","onChange","ev","target","to","Anchor","margin","vertical","direction","justify","gap","Button","primary","disabled","hoverIndicator","icon","FormNext","setFirstName","setLastName","setConfirmPassword","setEmail","setPhoneNumber","created","pad","align","Paragraph","AppBar","props","tag","background","left","right","style","zIndex","level","Text","responsive","round","onClick","PowerShutdown","sendLocation","location","latitude","longitude","idUser","user_status","date","user_token","LOCATION_SEND","locationSlice","locationReducer","setLongitude","setLatitude","timestamp","setTimestamp","setStatus","first","setFirst","getLocation","navigator","geolocation","getCurrentPosition","position","coords","React","useContext","ResponsiveContext","PowerReset","Image","fit","src","CONTACT","Menu","setLabel","dropAlign","bottom","FormUp","items","COVID","size","altitude","errorUser","errorLocation","Layer","onEsc","removeErrorUser","removeErrorLocation","onClickOutside","inProgress","params","inProgressUser","inProgressLocation","plain","horizontal","elevation","emailSent","theme","global","colors","font","family","height","useLayoutEffect","basename","Grommet","full","fill","Navbar","flex","overflow","exact","path","component","MainScreen","WelcomeScreen","LoginScreen","CreateAccountScreen","ConfirmAccountScreen","ForgotPasswordScreen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"mHAiCYA,EAaAC,E,kNAbAD,K,wBAAAA,E,gCAAAA,E,wCAAAA,E,wBAAAA,E,sBAAAA,E,oCAAAA,E,oCAAAA,E,0CAAAA,E,8BAAAA,E,2BAAAA,M,cAaAC,K,4BAAAA,E,gCAAAA,E,gCAAAA,E,4BAAAA,E,+BAAAA,M,KC9CZ,ICyEYC,EDrEGC,EAJG,CACd,QAAW,gD,SCWFC,EAAY,SAAEC,EAAmBC,GAArB,OACrBD,EAAOE,KAAKC,WAAYF,IAQfG,EAAkB,SAAEH,GAAF,OAAsB,SACjDD,GAEA,OAAOD,EAAWC,EAAQC,IATL,SAAED,GAAF,OAAyBA,EAAOE,KAAKG,SAAU,YAS9BC,CAAWN,KAGxCO,EAAmB,SAAEN,GAAF,OAAsB,SAClDD,GAEA,OAAOD,EAAWC,EAAQC,IAXX,SAAED,GAAF,OAAyBA,EAAOE,KAAKG,SAAU,aAWxBG,CAAYR,KAGzCS,EAAoB,SAAER,GAAF,OAAsB,SACnDD,GAEA,OAAOD,EAAWC,EAAQC,IAnBH,SAAED,GAAF,OAAyBA,EAAOE,KAAKG,SAAU,cAmBhCK,CAAaV,KAG1CW,EAAc,SAAEC,GACzB,OAASA,GACL,KAAKjB,EAAekB,eAChB,MAAO,yHACX,KAAKlB,EAAemB,iBAChB,MAAO,yCACX,KAAKnB,EAAeoB,UAChB,MAAO,+CACX,KAAKpB,EAAeqB,iBAChB,MAAO,gEACX,KAAKrB,EAAesB,YAChB,MAAO,gEACX,KAAKtB,EAAeuB,oBAChB,MAAO,0EACX,KAAKvB,EAAewB,WAChB,MAAO,wBACX,KAAKxB,EAAeyB,mBAChB,MAAO,iCACX,KAAKzB,EAAe0B,cAChB,MAAO,8EACX,KAAK1B,EAAe2B,WAChB,MAAO,uCACX,QAAS,OAAOC,KAAKC,UAAWZ,KAI3Ba,EAAS,CAClBC,MAAO,UACPC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,Y,SAGAjC,K,YAAAA,E,kBAAAA,E,eAAAA,M,KAQZ,IAwBakC,EAAW,WACpB,IACI,IAAMC,EAAmBC,aAAaC,QAAS,QAC/C,GAA0B,OAArBF,EACD,OAGJ,OADYT,KAAKY,MAAiBH,EAdvBI,MAAO,WACjBC,KAAK,SAAAC,GAAG,OAAIC,SAAUD,EAAK,OAC3BD,KAJiB,SAAEG,GAAF,OADFC,EACgCC,uBADjBD,EAAKE,MAAO,IAAKN,KAAK,SAAEO,GAAF,OAAcA,EAAEC,WAAY,OACJC,QAAQ,SAAEC,EAAQC,GAAV,OAAsBD,EAAIC,IAAGR,GADpG,IAAEC,KAMfJ,KAAK,SAAAY,GAAQ,OAAIC,OAAOC,aAAcF,MACtCG,KAAM,KAYT,MAAQC,GAEN,YADAC,QAAQC,IAAKF,KAKRG,EAAW,SAAEC,GACtB,IACI,IAAMzB,EAxCC,SAAES,GACb,IAAIiB,EAAc,SAAEjB,GAAF,OAAiBA,EAAKE,MAAO,IAAKN,KAAK,SAAEO,GAAF,OAAcA,EAAEC,WAAY,OAIrF,OAAOJ,EAAKE,MAAO,IACdN,IAAKqB,GACLrB,KAJiB,SAAEG,GAAF,OAAiBkB,EAAahB,wBAA6BI,QAAQ,SAAEC,EAAQC,GAAV,OAAsBD,EAAIC,IAAGR,MAKjHH,KANS,SAAEsB,GAAF,OAAgB,IAAMC,OAAQD,GAAIE,SAAU,KAAOC,QAAS,MAOrEV,KAAM,IA+BkBW,CAAQxC,KAAKC,UAAWiC,IACjDxB,aAAa+B,QAAS,OAAQhC,GAChC,MAAQqB,GACNC,QAAQC,IAAKF,KCrHrBY,IAAMC,aAAaC,QAAQC,KAAK,SAAAC,GAA6B,OAApBf,QAAQC,IAAKc,GAAcA,KAG7D,ICRKC,EDQCC,EAAQC,YAA2H,aAA3G,uCACjC,aAAgCC,GAAhC,qBAAA1B,EAAA,6DAAU2B,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,SAApB,SAC2BV,IAAMW,KAAN,UAAgB9E,EAAU+E,QAA1B,eACnB,CACIH,WACAC,aAEHG,MAAM,SAAEC,GAAyC,OAAzBzB,QAAQC,IAAKwB,GAAmBA,EAASC,QACjEC,OAAO,SAAEC,GAA+B,OAApB5B,QAAQC,IAAK2B,GAAc,CAAEhF,KAAMgF,EAAIC,YAPpE,UAU2B,oBATjBJ,EADV,QAUkB7E,KAVlB,uBAWcuD,EAAa,CACf2B,OAAQL,EAASM,QAAQC,QACzBZ,SAAUK,EAASM,QAAQX,SAC3Ba,UAAWR,EAASM,QAAQG,WAC5BC,SAAUV,EAASM,QAAQK,UAC3BC,MAAOZ,EAASM,QAAQM,MACxBC,YAAab,EAASM,QAAQQ,aAC9BC,OAAQf,EAASM,QAAQS,OACzBC,MAAOhB,EAASM,QAAQU,OAnBpC,kBAqBe,CAAEtC,OAAMuC,UAAWjB,EAASM,QAAQY,QAASC,QAASnB,EAAS7E,OArB9E,gCAsBkBuE,EAAS0B,gBAAiBpB,EAAS7E,OAtBrD,4CADiC,yDA2BxBkG,EAAa5B,YAA8G,kBAA9F,uCACtC,aAA6CC,GAA7C,qBAAA1B,EAAA,6DAAUU,EAAV,EAAUA,KAAMkB,EAAhB,EAAgBA,SAAU0B,EAA1B,EAA0BA,gBAA1B,SAC2BpC,IAAMW,KAAN,UAAgB9E,EAAU+E,QAA1B,gBACnB,CACIH,SAAUjB,EAAKiB,SACfc,WAAY/B,EAAK8B,UACjBG,UAAWjC,EAAKgC,SAChBE,MAAOlC,EAAKkC,MACZE,aAAcpC,EAAKmC,YACnBjB,WACA2B,aAAcD,EACdP,OAAQjG,EAAO0G,OAElBzB,MAAM,SAAEC,GAAyC,OAAzBzB,QAAQC,IAAKwB,GAAmBA,EAASC,QACjEC,OAAO,SAAEC,GAA+B,OAApB5B,QAAQC,IAAK2B,GAAc,CAAEhF,KAAMgF,EAAIC,YAbpE,WACUJ,EADV,QAiBkB7E,OAASN,EAAiB4G,aAjB5C,yCAkBe,CAAEN,QAASnB,EAAS7E,OAlBnC,gCAmBgBuE,EAAS0B,gBAAiBpB,EAAS7E,OAnBnD,2CADsC,yDAwB7BuG,EAAejC,YAA0D,oBAA1C,uCACxC,WAAQuB,EAAOtB,GAAf,eAAA1B,EAAA,sEAC2BkB,IAAMyC,IAAN,UAAe5G,EAAU+E,QAAzB,mCAA6DkB,GAAU,IACzFjB,MAAM,SAAEC,GAAyC,OAAzBzB,QAAQC,IAAKwB,GAAmBA,EAASC,QACjEC,OAAO,SAAAC,GAA6B,OAApB5B,QAAQC,IAAK2B,GAAc,CAAEhF,KAAMgF,EAAIC,YAHhE,WACUJ,EADV,QAOkB7E,OAASN,EAAiB+G,eAP5C,yCAQe,CAAET,QAASnB,EAAS7E,OARnC,gCASgBuE,EAAS0B,gBAAiBpB,EAAS7E,OATnD,2CADwC,yDAc/B0G,EAAiBpC,YAAwD,sBAAxC,uCAC1C,WAAQf,EAAMgB,GAAd,eAAA1B,EAAA,sEAC2BkB,IAAMW,KAAN,UAAgB9E,EAAU+E,QAA1B,oBAAsD,CAAEH,SAAUjB,EAAKiB,SAAUa,UAAW9B,EAAK8B,UAAWE,SAAUhC,EAAKgC,SAAUE,MAAOlC,EAAKkC,MAAOC,YAAanC,EAAKmC,cAC5Ld,MAAM,SAAEC,GAAyC,OAAzBzB,QAAQC,IAAKwB,GAAmBA,EAASC,QACjEC,OAAO,SAAAC,GAA6B,OAApB5B,QAAQC,IAAK2B,GAAc,CAAEhF,KAAMgF,EAAIC,YAHhE,WACUJ,EADV,QAOkB7E,OAASN,EAAiBiH,aAP5C,yCAQe,CAAEX,QAASnB,EAAS7E,OARnC,gCASgBuE,EAAS0B,gBAAiBpB,EAAS7E,OATnD,2CAD0C,yDAcjC4G,EAAetC,YAAiG,oBAAjF,uCACxC,WAAQsB,EAAQrB,GAAhB,iBAAA1B,EAAA,6DACUU,EAAOgB,EAASsC,WAAWtD,KAAKuD,YAD1C,SAE2B/C,IAAMyC,IAAN,UAAe5G,EAAU+E,QAAzB,8BAAwDpB,EAAK2B,OAA7D,mBAAgFU,EAAhF,kBAAkGrC,EAAKsC,MAAOkB,cACjI,CACIC,QAAS,CACL,cAAgB,UAAhB,OAA4BzD,EAAKsC,MAAOkB,iBAG/CnC,MAAM,SAAEC,GAAyC,OAAzBzB,QAAQC,IAAKwB,GAAmBA,EAASC,QACjEC,OAAO,SAAAC,GAA6B,OAApB5B,QAAQC,IAAK2B,GAAc,CAAEhF,KAAMgF,EAAIC,YAThE,WAEUJ,EAFV,QAWkB7E,OAASN,EAAiBuH,cAX5C,yCAYe,CAAEjB,QAASnB,EAAS7E,KAAM4F,WAZzC,gCAagBrB,EAAS0B,gBAAiBpB,EAAS7E,OAbnD,2CADwC,yDAiB/BkH,EAAc5C,YAA+D,mBAA/C,uCACvC,WAAQ6C,EAAGC,GAAX,eAAAvE,EAAA,8DAEkBwE,KADR9D,EAAO1B,KADjB,yCAGe,CAAEmE,QAAStG,EAAiB4H,eAAgB/D,SAH3D,gCAIgB6D,EAASnB,gBAAiB,aAJ1C,2CADuC,yDAUrCsB,EAA0B,CAC5BC,UAAU,EACV1B,WAAW,EACX2B,SAAS,EACTX,iBAAaO,EACb3G,WAAO2G,EACPrB,aAASqB,GAGAK,EAAYC,YAAa,CAClCC,KAAM,OACNL,eACAM,SAAU,CACNC,OAAQ,SAAEC,GACNA,EAAMP,UAAW,EACjBO,EAAMjB,iBAAcO,EACpBU,EAAMrH,WAAQ2G,EDJK,WAC3B,IACItF,aAAaiG,WAAY,QAC3B,MAAQ7E,GACNC,QAAQC,IAAKF,ICCT8E,IAEJC,YAAa,SAAEH,GACXA,EAAMrH,WAAQ2G,IAGtBc,cAAe,SAAAC,GACXA,EACKC,QAAShE,EAAMiE,WAAW,SAAEP,EAAOjI,GAChCiI,EAAMP,UAAW,EACjBO,EAAMjB,YAAchH,EAAOqF,QAAQ5B,KACnCwE,EAAMjC,UAAYhG,EAAOqF,QAAQW,aAEpCuC,QAASnC,EAAWoC,WAAW,SAAEP,EAAOjI,OAExCuI,QAAS9B,EAAa+B,WAAW,SAAEP,EAAOjI,OAE1CuI,QAAS3B,EAAe4B,WAAW,SAAEP,EAAOjI,OAE5CuI,QAASzB,EAAa0B,WAAW,SAAEP,EAAOjI,GACvCiI,EAAMjB,YAAalB,OAAS9F,EAAOqF,QAAQS,UAE9CyC,QAASnB,EAAYoB,WAAW,SAAEP,EAAOjI,GACtCiI,EAAMjB,YAAchH,EAAOqF,QAAQ5B,KACnCwE,EAAMP,UAAW,KAEpBe,WAAYrI,EAAiB,UAAW,SAAE6H,EAAOjI,GAC9CsD,QAAQC,IAAKvD,EAAOE,MACpB+H,EAAMN,SAAU,EAChBM,EAAMrH,WAAQ2G,EACdU,EAAM/B,aAAUqB,KAEnBkB,WAAYlI,EAAkB,UAAW,SAAE0H,EAAOjI,GAC/CsD,QAAQC,IAAKvD,EAAOE,MACpB+H,EAAMN,SAAU,EACQ,aAAnB3H,EAAOqF,UACR4C,EAAMrH,MAAQZ,EAAOqF,SACzB4C,EAAM/B,aAAUqB,KAEnBkB,WAAYhI,EAAmB,UAAW,SAAEwH,EAAOjI,GAChDsD,QAAQC,IAAKvD,EAAOE,MACpB+H,EAAMN,SAAU,EAChBM,EAAMrH,WAAQ2G,EACdU,EAAM/B,QAAUlG,EAAOqF,QAAQa,QAC/B1C,EAAUyE,EAAMjB,mBAK1B0B,EAAcd,EAAUe,Q,EAESf,EAAUgB,QAAlCZ,E,EAAAA,OAAQI,E,EAAAA,YAEVV,EAAW,SAAEO,GAAF,OAAwBA,EAAMxE,KAAKiE,UAE9CV,GAAc,SAAEiB,GAAF,OAAwBA,EAAMxE,KAAKuD,aAEjDW,GAAU,SAAEM,GAAF,OAAwBA,EAAMxE,KAAKkE,SAE7C/G,GAAQ,SAAEqH,GAAF,OAAwBA,EAAMxE,KAAK7C,OAE3CsF,GAAU,SAAE+B,GAAF,OAAwBA,EAAMxE,KAAKyC,SAE3CwC,KE9LA,cAAO,IAAD,EACiBG,mBAAU,IAD3B,mBACTnE,EADS,KACCoE,EADD,OAEiBD,mBAAU,IAF3B,mBAETlE,EAFS,KAECoE,EAFD,KAGXC,EAAWC,cAEXC,EAAUC,cACVC,EAAYC,YAAa3B,GAO/B,OALA4B,qBAAW,WACFF,GACDF,EAAQK,KAAM,OACnB,CAAEH,IAGD,eAACI,EAAA,EAAD,CAAKC,UAAW,CAAEvJ,KAAM,YAAawJ,SAAU,KAA/C,UAEI,cAACC,EAAA,EAAD,wBACA,eAACC,EAAA,EAAD,CACIC,SAAU,WAAQb,EAAUzE,EAAO,CAAEG,WAAUC,eAC/CmF,QAAS,WAAQhB,EAAa,IAAMC,EAAa,KAFrD,UAII,cAACgB,EAAA,EAAD,CAAWjC,KAAK,WAAWkC,MAAM,SAAjC,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,sBAAsBpC,KAAK,WAAWqC,MAAOzF,EAAU0F,SAAU,SAAAC,GAAE,OAAIvB,EAAauB,EAAGC,OAAOH,YAEhH,cAACJ,EAAA,EAAD,CAAWjC,KAAK,WAAWkC,MAAM,eAAjC,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,sBAAsBpC,KAAK,WAAWqC,MAAOxF,EAAUyF,SAAU,SAAAC,GAAE,OAAItB,EAAasB,EAAGC,OAAOH,QAASjK,KAAK,eAE9H,cAAC,IAAD,CAAMqK,GAAG,UAAT,SACI,cAACC,EAAA,EAAD,CAAQR,MAAM,2BAAwBS,OAAQ,CAAEC,SAAU,cAE9D,eAAClB,EAAA,EAAD,CAAKmB,UAAU,MAAMC,QAAQ,SAASC,IAAI,QAAQJ,OAAQ,CAAEC,SAAU,UAAtE,UACI,cAACI,EAAA,EAAD,CAAQ5K,KAAK,SAAS6K,SAAO,EAACf,MAAM,YAAYgB,SAAuB,KAAbtG,GAAgC,KAAbC,IAC7E,cAACmG,EAAA,EAAD,CAAQ5K,KAAK,QAAQ8J,MAAM,oB,UCjChC,cACX,OACI,eAACR,EAAA,EAAD,WACI,cAACG,EAAA,EAAD,oCACA,eAACH,EAAA,EAAD,CAAKmB,UAAU,MAAMC,QAAQ,SAASC,IAAI,QAA1C,UACI,cAAC,IAAD,CAAMN,GAAG,SAAT,SACI,cAACO,EAAA,EAAD,CAAQd,MAAM,YAAYiB,gBAAc,EAACC,KAAM,cAACC,GAAA,EAAD,QAEnD,cAAC,IAAD,CAAMZ,GAAG,iBAAT,SACI,cAACO,EAAA,EAAD,CAAQC,SAAO,EAACf,MAAM,cAAciB,gBAAc,EAACC,KAAM,cAACC,GAAA,EAAD,e,UCN9D,cAAO,IAAD,EACiBtC,mBAAU,IAD3B,mBACTnE,EADS,KACCoE,EADD,OAEmBD,mBAAU,IAF7B,mBAETtD,EAFS,KAEE6F,EAFF,OAGiBvC,mBAAU,IAH3B,mBAGTpD,EAHS,KAGC4F,EAHD,OAIiBxC,mBAAU,IAJ3B,mBAITlE,EAJS,KAICoE,EAJD,OAK+BF,mBAAU,IALzC,mBAKTxC,EALS,KAKQiF,EALR,OAMWzC,mBAAU,IANrB,mBAMTlD,EANS,KAMF4F,EANE,OAOuB1C,mBAAU,IAPjC,mBAOTjD,EAPS,KAOI4F,EAPJ,KAQXC,EAAUpC,YAAanD,IAEvB8C,EAAWC,cAEjB,OACI,cAACO,EAAA,EAAD,CAAKC,UAAW,CAAEvJ,KAAM,YAAawJ,SAAU,KAAOgC,IAAI,QAA1D,SACKD,IAAY7L,EAAiB4G,aAC1B,eAACgD,EAAA,EAAD,CAAKmC,MAAM,SAASf,QAAQ,SAASC,IAAI,QAAQpB,UAAW,CAAEvJ,KAAM,YAAawJ,SAAU,KAA3F,UACI,cAACC,EAAA,EAAD,yCACA,cAACiC,GAAA,EAAD,iFACA,cAAC,IAAD,CAAMrB,GAAG,IAAT,SACI,cAACO,EAAA,EAAD,CAAQC,SAAO,EAACf,MAAM,wBAAqBiB,gBAAc,EAACC,KAAM,cAACC,GAAA,EAAD,WAIxE,eAAC3B,EAAA,EAAD,CAAKiB,OAAO,SAAZ,UACI,cAACd,EAAA,EAAD,iCACA,eAACC,EAAA,EAAD,CACIC,SAAU,WACNb,EAAU5C,EAAY,CAAE3C,KAAM,CAAEiB,WAAUa,YAAWE,WAAUE,QAAOC,cAAaR,YAAQmC,GAAa5C,WAAU0B,sBAEtHyD,QAAS,WACLhB,EAAa,IACbC,EAAa,IACbqC,EAAc,IACdC,EAAa,IACbC,EAAoB,IACpBE,EAAgB,IAChBD,EAAU,KAXlB,UAaI,cAACxB,EAAA,EAAD,CAAWjC,KAAK,WAAWkC,MAAM,SAAjC,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,sBAAsBpC,KAAK,WAAWqC,MAAOzF,EAAU0F,SAAU,SAAAC,GAAE,OAAIvB,EAAauB,EAAGC,OAAOH,YAEhH,cAACJ,EAAA,EAAD,CAAWjC,KAAK,YAAYkC,MAAM,YAAlC,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,uBAAuBpC,KAAK,YAAYqC,MAAO5E,EAAW6E,SAAU,SAAAC,GAAE,OAAIe,EAAcf,EAAGC,OAAOH,YAEpH,cAACJ,EAAA,EAAD,CAAWjC,KAAK,WAAWkC,MAAM,MAAjC,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,uBAAuBpC,KAAK,WAAWqC,MAAO1E,EAAU2E,SAAU,SAAAC,GAAE,OAAIgB,EAAahB,EAAGC,OAAOH,YAEjH,cAACJ,EAAA,EAAD,CAAWjC,KAAK,QAAQkC,MAAM,eAA9B,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,mBAAmBpC,KAAK,QAAQqC,MAAOxE,EAAOyE,SAAU,SAAAC,GAAE,OAAIkB,EAAUlB,EAAGC,OAAOH,YAEpG,cAACJ,EAAA,EAAD,CAAWjC,KAAK,QAAQkC,MAAM,+BAA9B,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,mBAAmBpC,KAAK,QAAQqC,MAAOvE,EAAawE,SAAU,SAAAC,GAAE,OAAImB,EAAgBnB,EAAGC,OAAOH,YAEhH,cAACJ,EAAA,EAAD,CAAWjC,KAAK,WAAWkC,MAAM,eAAjC,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,sBAAsBpC,KAAK,WAAWqC,MAAOxF,EAAUyF,SAAU,SAAAC,GAAE,OAAItB,EAAasB,EAAGC,OAAOH,QAASjK,KAAK,eAE9H,cAAC6J,EAAA,EAAD,CAAWjC,KAAK,kBAAkBkC,MAAM,4BAAxC,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,8BAA8BpC,KAAK,kBAAkBqC,MAAO9D,EAAiB+D,SAAU,SAAAC,GAAE,OAAIiB,EAAoBjB,EAAGC,OAAOH,QAASjK,KAAK,eAE3J,eAACsJ,EAAA,EAAD,CAAKmB,UAAU,MAAMC,QAAQ,SAASC,IAAI,QAA1C,UACI,cAACC,EAAA,EAAD,CACI5K,KAAK,SACL6K,SAAO,EACPf,MAAM,aACNgB,SACiB,KAAbtG,GACc,KAAda,GACa,KAAbE,GACU,KAAVE,GACgB,KAAhBC,GACoB,KAApBS,GACa,KAAb1B,GACA0B,IAAoB1B,IAG5B,cAACmG,EAAA,EAAD,CAAQ5K,KAAK,QAAQ8J,MAAM,sB,oBC7EjD6B,GAAS,SAAEC,GAAF,OACX,cAACtC,EAAA,EAAD,aACIuC,IAAI,SACJpB,UAAU,MACVgB,MAAM,SACNf,QAAQ,UACRoB,WAAW,QACXN,IAAK,CAAEO,KAAM,SAAUC,MAAO,QAASxB,SAAU,SAEjDyB,MAAO,CAAEC,OAAQ,MACbN,KAIG,cAEX,IAAM1C,EAAYC,YAAa3B,GACzBjE,EAAO4F,YAAarC,IACpBgC,EAAWC,cAEjB,OACI,eAAC,GAAD,WACI,cAACU,EAAA,EAAD,CAAS0C,MAAM,IAAI5B,OAAO,OAA1B,4BAGCrB,GACG,eAACI,EAAA,EAAD,CAAKmB,UAAU,MAAMC,QAAQ,SAASe,MAAM,SAASd,IAAI,SAAzD,UACI,cAACyB,GAAA,EAAD,oCAAoB7I,QAApB,IAAoBA,OAApB,EAAoBA,EAAM8B,aAC1B,cAACiE,EAAA,EAAD,CACI+C,YAAY,EACZtB,gBAAgB,EAChBe,WAAW,SACXQ,MAAM,OACNd,IAAI,SACJe,QAAS,kBAAMzD,EAAUhB,MAN7B,SAOI,cAAC0E,GAAA,EAAD,a,kDJvCZpI,K,+BAAAA,M,KKOL,IAAMqI,GAAenI,YAA2F,wBAA3E,uCACxC,WAAQoI,EAAUnI,GAAlB,qBAAA1B,EAAA,6DACUgD,EADV,UACkBtB,EAASsC,WAAWtD,KAAKuD,mBAD3C,iBACkB,EAAsCjB,aADxD,aACkB,EAA6CkB,aAD/D,SAE2BhD,IAAMW,KAAN,UAAgB9E,EAAU+E,QAA1B,aAA+C,CAClEgI,SAAUD,EAASC,SACnBC,UAAWF,EAASE,UACpBxH,QAASsH,EAASG,OAClBC,YAAaJ,EAAS9G,OACtBmH,KAAML,EAASK,KACfC,WAAYnH,GACb,CACCmB,QAAS,CACL,cAAgB,UAAhB,OAA4BnB,MAG/BjB,MAAM,SAAAC,GAAQ,OAAIA,EAASC,QAC3BC,OAAO,SAAAC,GAA6B,OAApB5B,QAAQC,IAAK2B,GAAc,CAAEhF,KAAMgF,EAAIC,YAfhE,WAEUJ,EAFV,QAgBkB7E,OAASoE,EAAqB6I,cAhBhD,yCAiBepI,EAAS7E,MAjBxB,gCAkBgBuE,EAAS0B,gBAAiBpB,EAAS7E,OAlBnD,2CADwC,yDAuBtCuH,GAA8B,CAChCvB,aAASqB,EACTI,SAAS,EACT/G,WAAO2G,GAGL6F,GAAgBvF,YAAa,CAC/BC,KAAM,WACNL,gBACAM,SAAU,CACNK,YAAa,SAAEH,GACXA,EAAMrH,WAAQ2G,IAGtBc,cAAe,SAAAC,GACXA,EACKC,QAASoE,GAAanE,WAAW,SAAEP,EAAOjI,GACvCsD,QAAQC,IAAKvD,EAAOE,SAEvBuI,WAAYrI,EAAiB,cAAe,SAAE6H,EAAOjI,GAClDsD,QAAQC,IAAKvD,EAAOE,MACpB+H,EAAMN,SAAU,KAEnBc,WAAYlI,EAAkB,cAAe,SAAE0H,EAAOjI,GACnDsD,QAAQC,IAAKvD,EAAOE,MACpB+H,EAAMN,SAAU,EAChBM,EAAMrH,MAAQZ,EAAOqF,WAExBoD,WAAYhI,EAAmB,cAAe,SAAEwH,EAAOjI,GACpDsD,QAAQC,IAAKvD,EAAOE,MACpB+H,EAAMN,SAAU,EAChBM,EAAM/B,QAAUlG,EAAOqF,QAAQa,cAMzCmH,GAAkBD,GAAczE,QAEvBP,GAAgBgF,GAAcxE,QAA9BR,YAIFT,GAAU,SAAEM,GAAF,OAAwBA,EAAM2E,SAASjF,SAEjD/G,GAAQ,SAAEqH,GAAF,OAAwBA,EAAM2E,SAAShM,OAE7CyM,MCtEA,cACX,IAAMrE,EAAWC,cACXxF,EAAO4F,YAAarC,IAFT,EAGmB6B,mBAAU,GAH7B,mBAGTiE,EAHS,KAGEQ,EAHF,OAIiBzE,mBAAU,GAJ3B,mBAITgE,EAJS,KAICU,EAJD,OAKmB1E,mBAAU,GAL7B,mBAKT2E,EALS,KAKEC,EALF,OAMa5E,mBAAQ,OAAUpF,QAAV,IAAUA,OAAV,EAAUA,EAAMqC,QANrC,mBAMTA,EANS,KAMD4H,EANC,OAOW7E,oBAAU,GAPrB,mBAOT8E,EAPS,KAOFC,EAPE,KASjBtE,qBAAW,kBAAMuE,MAAe,IAEhCvE,qBAAW,YACNqE,GAAS3E,EAAUlC,EAAchB,IAClC6H,GAASC,GAAU,KACpB,CAAE9H,IAEL,IAAM+H,EAAc,WACXC,UAAUC,aACXD,UAAUC,YAAYC,oBAAoB,SAAAC,GACtCV,EAAaU,EAASC,OAAOrB,UAC7BS,EAAcW,EAASC,OAAOpB,WAC9BW,EAAcQ,EAAST,eAK7BjB,ERsGC4B,IAAMC,WAAYC,KQpGzB,OACI,eAAC7E,EAAA,EAAD,CAAKC,UAAW,CAAEvJ,KAAM,YAAawJ,SAAU,KAAOgC,IAAI,SAA1D,UACI,eAAClC,EAAA,EAAD,CAAKmB,UAAU,MAAME,IAAI,QAAQc,MAAM,SAASf,QAAQ,UAAxD,UACI,cAACjB,EAAA,EAAD,iCACA,cAACH,EAAA,EAAD,CACI+C,YAAY,EACZtB,gBAAgB,EAChBe,WAAW,SACXQ,MAAM,OACNd,IAAI,SACJe,QAAS,kBAAMoB,KANnB,SAOI,cAACS,GAAA,EAAD,SAGR,cAACC,GAAA,EAAD,CAAOC,IAAI,QAAQC,IAAG,yHAAqH5B,EAArH,YAAmIC,EAAnI,qCAA2KD,EAA3K,YAAyLC,EAAzL,mBAA+MrL,EAAOC,SAC5O,eAAC8H,EAAA,EAAD,CAAKmB,UAA0B,UAAf4B,EAAyB,SAAW,MAAO1B,IAAI,QAAQc,MAAM,SAASlB,OAAQ,CAAEC,SAAU,SAAWE,QAAQ,UAA7H,UACI,eAACpB,EAAA,EAAD,CAAKmB,UAAU,MAAMgB,MAAM,SACvBa,MAAM,QAAQd,IAAK,CAAEO,KAAM,SAAUC,MAAO,SAAWK,YAAY,EACnEP,WAAYlG,IAAWjG,EAAO0G,KAAO,YAAcT,IAAWjG,EAAO6O,QAAU,iBAAmB,kBAFtG,UAGI,cAACpC,GAAA,EAAD,8BACA,cAACqC,GAAA,EAAD,CAAM3E,MAAO4E,GAAU9I,GAAU+I,UAAW,CAAE3C,MAAO,QAAS4C,OAAQ,OAClE5D,KAAM,cAAC6D,GAAA,EAAD,IACNC,MAAO,CACH,CAAEhF,MAAO,OAAQyC,QAAS,kBAAMiB,EAAW7N,EAAO0G,QAClD,CAAEyD,MAAO,eAAgByC,QAAS,kBAAMiB,EAAW7N,EAAO6O,WAC1D,CAAE1E,MAAO,YAAUyC,QAAS,kBAAMiB,EAAW7N,EAAOoP,eAGhE,cAACnE,EAAA,EAAD,CAAQC,SAAO,EAACf,MAAM,cAAckB,KAAM,cAACC,GAAA,EAAD,IAAc+D,KAAK,QACzDzC,QAAS,kBAAMzD,EAAU2D,GAAc,CACnCwC,SAAU,EACVlC,KAAMO,EACNT,OAAQtJ,EAAM2B,OACdyH,WACAC,YACAhH,sBAOlB8I,GAAW,SAAE1O,GACf,OAASA,GACL,KAAKL,EAAO6O,QAAS,MAAO,eAC5B,KAAK7O,EAAOoP,MAAO,MAAO,YAC1B,KAAKpP,EAAO0G,KAAM,MAAO,S,UC3ElB,cACX,IAAM6I,EAAY/F,YAAa5F,IACzB4L,EAAgBhG,YAAauD,IAC7B5D,EAAWC,cAEjB,OACI,cAACO,EAAA,EAAD,WACQ4F,GAAaC,IACb,cAACC,GAAA,EAAD,CACI/C,YAAY,EACZ9C,UAAU,QACV8F,MAAO,kBAAMvG,EAAUoG,EAAYI,IAAoBC,OACvDC,eAAgB,kBAAM1G,EAAUoG,EAAYI,IAAoBC,OAJpE,SAMI,cAACjG,EAAA,EAAD,CAAKkC,IAAI,SAASM,WAAW,eAA7B,SACI,cAACM,GAAA,EAAD,UAAO3L,EAAayO,GAAwBC,YChBrD,eAA4D,IAAxDjN,EAAuD,EAAvDA,MACT4G,EAAWC,cACX0G,EAAatG,YAAa1B,IAMhC,OAJA2B,qBAAW,gBACgB/B,IAAvBnF,EAAMwN,OAAO7J,OAAuBiD,EAAUvC,EAAcrE,EAAMwN,OAAO7J,UAC1E,CAAE3D,EAAMwN,OAAO7J,QAGd,cAACyD,EAAA,EAAD,CAAKC,UAAW,CAAEvJ,KAAM,YAAawJ,SAAU,KAA/C,SACKiG,EACG,cAAC/D,GAAA,EAAD,2CAEA,eAACpC,EAAA,EAAD,CAAKmC,MAAM,SAASf,QAAQ,SAASnB,UAAW,CAAEvJ,KAAM,YAAawJ,SAAU,KAA/E,UACI,cAACC,EAAA,EAAD,6CACA,cAAC,IAAD,CAAMY,GAAG,SAAT,SACI,cAACO,EAAA,EAAD,CAAQC,SAAO,EAACf,MAAM,YAAYiB,gBAAc,EAACC,KAAM,cAACC,GAAA,EAAD,cChBhE,cAEX,IAAM0E,EAAiBxG,YAAa5F,IAC9BqM,EAAqBzG,YAAauD,IAExC,OACI,cAACpD,EAAA,EAAD,WACOsG,GAAsBD,IACrB,cAACP,GAAA,EAAD,CACI/C,YAAY,EACZ9C,UAAU,QACVwE,SAAS,MACT8B,OAAK,EAJT,SAKI,cAACvG,EAAA,EAAD,CAAKkC,IAAK,CAAEsE,WAAY,SAAUtF,SAAU,SAAWsB,WAAW,SAASQ,MAAM,QAAQ/B,OAAQ,CAAEC,SAAU,UAAYuF,UAAU,QAAnI,SACI,cAAC3D,GAAA,EAAD,CAAM4C,KAAK,SAAX,4BCbT,cACX,IAAMlG,EAAWC,cADA,EAEiBJ,mBAAU,IAF3B,mBAETnE,EAFS,KAECoE,EAFD,KAGXoH,EAAY7G,YAAanD,IAG/B,OADA5C,QAAQC,IAAK2M,GAET,cAAC1G,EAAA,EAAD,UACM0G,IAActQ,EAAiBiH,aAC7B,eAAC2C,EAAA,EAAD,CAAKC,UAAW,CAAEvJ,KAAM,YAAawJ,SAAU,KAA/C,UAEI,cAACC,EAAA,EAAD,uCACA,eAACC,EAAA,EAAD,CACIC,SAAU,WAAQb,EAAUpC,EAAgB,CAAElC,WAAUiB,MAAO,GAAIJ,UAAW,GAAIE,SAAU,GAAIG,YAAa,OAC7GkE,QAAS,WAAQhB,EAAa,KAFlC,UAII,cAACiB,EAAA,EAAD,CAAWjC,KAAK,WAAWkC,MAAM,SAAjC,SACI,cAACC,EAAA,EAAD,CAAWC,GAAG,sBAAsBpC,KAAK,WAAWqC,MAAOzF,EAAU0F,SAAU,SAAAC,GAAE,OAAIvB,EAAauB,EAAGC,OAAOH,YAEhH,eAACX,EAAA,EAAD,CAAKmB,UAAU,MAAMC,QAAQ,SAASC,IAAI,QAA1C,UACI,cAACC,EAAA,EAAD,CAAQ5K,KAAK,SAAS6K,SAAO,EAACf,MAAM,UAAUgB,SAAuB,KAAbtG,IACxD,cAACoG,EAAA,EAAD,CAAQ5K,KAAK,QAAQ8J,MAAM,mBAKvC,eAACR,EAAA,EAAD,CAAKmC,MAAM,SAASf,QAAQ,SAASC,IAAI,QAAQpB,UAAW,CAAEvJ,KAAM,YAAawJ,SAAU,KAA3F,UACI,cAACC,EAAA,EAAD,yCACA,cAACiC,GAAA,EAAD,qFACA,cAAC,IAAD,CAAMrB,GAAG,IAAT,SACI,cAACO,EAAA,EAAD,CAAQC,SAAO,EAACf,MAAM,wBAAqBiB,gBAAc,EAACC,KAAM,cAACC,GAAA,EAAD,cCrBlFgF,GAAQ,CACVC,OAAQ,CACJC,OAAO,eAAM5O,GACb6O,KAAM,CACFC,OAAQ,SACRrB,KAAM,OACNsB,OAAQ,UAOL,cACX,IAAMxH,EAAWC,cACXG,EAAYC,YAAa3B,GAO/B,OALA+I,2BAAiB,WACbzH,EAAU5B,OACX,IAIC,cAAC,IAAD,CAAQsJ,SAAS,oBAAjB,SACI,cAACC,EAAA,EAAD,2BAAa,CAAER,WAAf,IAAwBS,MAAI,EAA5B,SACI,eAACpH,EAAA,EAAD,CAAKqH,MAAI,EAAT,UACI,cAACC,GAAD,IACA,cAACtH,EAAA,EAAD,CAAKmB,UAAU,MAAMoG,MAAI,EAACC,SAAS,OAAnC,SACI,eAACxH,EAAA,EAAD,CAAKuH,MAAI,EAACpF,MAAM,SAASf,QAAQ,SAAjC,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOqG,OAAK,EAACC,KAAK,IAAIC,UAAY/H,EAA4BgI,GAAhBC,KAC9C,cAAC,IAAD,CAAOH,KAAK,SAASC,UAAWG,KAChC,cAAC,IAAD,CAAOJ,KAAK,iBAAiBC,UAAWI,KACxC,cAAC,IAAD,CAAON,OAAK,EAACC,KAAK,kBAAkBC,UAAWK,KAC/C,cAAC,IAAD,CAAON,KAAK,yBAAyBC,UAAWK,KAChD,cAAC,IAAD,CAAON,KAAK,UAAUC,UAAWM,sBCxClDC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB9M,MAAK,YAAkD,IAA/C+M,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDDO,GAAQC,YAAgB,CACjCxJ,QAAS,CACLlF,QACAmJ,eCJRwF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACE,cAACK,GAAD,QAGJC,SAASC,eAAgB,SAM3Bf,O","file":"static/js/main.09c99209.chunk.js","sourcesContent":["import { Status } from \"../../globals\";\n\nexport type UserState = {\n    loggedIn: boolean;\n    loading: boolean;\n    confirmed: boolean;\n    currentUser?: User;\n    error?: UserErrorTypes;\n    success?: UserSuccessTypes;\n};\n\nexport type Token = {\n    access_token: string;\n    expires_in: number;\n    id_token?: number;\n    refresh_expires_in: number;\n    refresh_token: string;\n    scope: string;\n    session_state: string;\n    token_type: string;\n};\n\nexport type User = {\n    userId?: number;\n    username: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    phoneNumber: string;\n    status?: Status;\n    token?: Token;\n};\n\nexport enum UserErrorTypes {\n    USER_EXIST = 'USER_EXIST',\n    USER_NOT_EXIST = 'USER_NOT_EXIST',\n    INCORRECT_PASSWORD = 'INCORRECT_PASSWORD',\n    FIELD_NULL = 'FIELD_NULL',\n    BAD_EMAIL = 'BAD_EMAIL',\n    BAD_PHONE_NUMBER = 'BAD_PHONE_NUMBER',\n    BAD_CONFIRMATION = 'BAD_CONFIRMATION',\n    EMAIL_NOT_CONFIRMED = 'EMAIL_NOT_CONFIRMED',\n    TOKEN_EXPIRED = 'TOKEN_EXPIRED',\n    EMAIL_EXIST = 'EMAIL_EXIST'\n}\n\nexport enum UserSuccessTypes {\n    USER_CREATED = 'USER_CREATED',\n    USER_LOGGED_IN = 'USER_LOGGED_IN',\n    USER_CONFIRMED = 'USER_CONFIRMED',\n    FORGOT_EMAIL = 'FORGOT_EMAIL',\n    STATUS_CHANGE = 'STATUS_CHANGE'\n}\n","const appconfig = {\n    \"baseUrl\": \"https://covid-alert-g4-gateway.herokuapp.com\",\n};\n\nexport default appconfig;\n","import { AnyAction } from \"@reduxjs/toolkit\";\nimport { ResponsiveContext } from \"grommet\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport appconfig from \"../appconfig\";\nimport { User, UserErrorTypes, UserState } from \"../state/user/types\";\n\nexport type SliceActions<T> = {\n    [ K in keyof T ]: T[ K ] extends ( ...args: any[] ) => infer A ? A : never;\n}[ keyof T ];\n\n\nexport const hasPrefix = ( action: AnyAction, prefix: string ) =>\n    action.type.startsWith( prefix );\n\nexport const isPending = ( action: AnyAction ) => action.type.endsWith( \"/pending\" );\n\nexport const isFulfilled = ( action: AnyAction ) => action.type.endsWith( \"/fulfilled\" );\n\nconst isRejected = ( action: AnyAction ) => action.type.endsWith( \"/rejected\" );\n\nexport const isPendingAction = ( prefix: string ) => (\n    action: AnyAction\n): action is AnyAction => {\n    return hasPrefix( action, prefix ) && isPending( action );\n};\n\nexport const isRejectedAction = ( prefix: string ) => (\n    action: AnyAction\n): action is AnyAction => {\n    return hasPrefix( action, prefix ) && isRejected( action );\n};\n\nexport const isFulfilledAction = ( prefix: string ) => (\n    action: AnyAction\n): action is AnyAction => {\n    return hasPrefix( action, prefix ) && isFulfilled( action );\n};\n\nexport const getErrorMsg = ( error: UserErrorTypes | string ) => {\n    switch ( error ) {\n        case UserErrorTypes.USER_NOT_EXIST:\n            return \"Le compte avec lequel vous essayez de vous connecter n'existe pas. Veuillez créer un compte si vous en avez pas un.\";\n        case UserErrorTypes.BAD_CONFIRMATION:\n            return \"Le code de confirmation est incorrect.\";\n        case UserErrorTypes.BAD_EMAIL:\n            return \"L'adresse mail n'est pas dans le bon format.\";\n        case UserErrorTypes.BAD_PHONE_NUMBER:\n            return \"Le numéro de téléphone n'est pas dans le bon format.\";\n        case UserErrorTypes.EMAIL_EXIST:\n            return \"Il y a déjà un compte rattaché a cette adresse mail.\";\n        case UserErrorTypes.EMAIL_NOT_CONFIRMED:\n            return \"Vous devez confirmer vous adresse mail avant de pouvoir vous connecter.\";\n        case UserErrorTypes.FIELD_NULL:\n            return \"Il y a un champ vide.\";\n        case UserErrorTypes.INCORRECT_PASSWORD:\n            return \"Le mot de passe est incorrect.\";\n        case UserErrorTypes.TOKEN_EXPIRED:\n            return \"Le code de confirmation est expiré. Veuillez créer un nouveau compte.\";\n        case UserErrorTypes.USER_EXIST:\n            return \"Ce pseudo est déjà utilisé.\";\n        default: return JSON.stringify( error );\n    }\n};\n\nexport const Colors = {\n    brand: '#033F63',\n    brand2: '#28666E',\n    brand3: '#7C9885',\n    brand4: '#B5B682',\n    brand5: '#FEDC97'\n};\n\nexport enum Status {\n    SAFE = \"SAFE\",\n    CONTACT = \"CONTACT\",\n    COVID = \"COVID\"\n}\n\n\n// These are the ciphers/deciphers\nconst cipher = ( text: string ) => {\n    let textToChars = ( text: any ) => text.split( '' ).map( ( c: any ) => c.charCodeAt( 0 ) );\n    let byteHex = ( n: any ) => ( \"0\" + Number( n ).toString( 16 ) ).substr( -2 );\n    let applySaltToChar = ( code: any ) => textToChars( process.env.REACT_APP_SALT ).reduce( ( a: any, b: any ) => a ^ b, code );\n\n    return text.split( '' )\n        .map( textToChars )\n        .map( applySaltToChar )\n        .map( byteHex )\n        .join( '' );\n};\n\nconst decipher = ( encoded: string ) => {\n    let textToChars = ( text: any ) => text.split( '' ).map( ( c: any ) => c.charCodeAt( 0 ) );\n    let applySaltToChar = ( code: any ) => textToChars( process.env.REACT_APP_SALT ).reduce( ( a: any, b: any ) => a ^ b, code );\n\n    return encoded.match( /.{1,2}/g )!\n        .map( hex => parseInt( hex, 16 ) )\n        .map( applySaltToChar )\n        .map( charCode => String.fromCharCode( charCode ) )\n        .join( '' );\n};\n\n\nexport const loadUser = () => {\n    try {\n        const serializedObject = localStorage.getItem( \"user\" );\n        if ( serializedObject === null ) {\n            return undefined;\n        }\n        const res = JSON.parse( decipher( serializedObject ) );\n        return res as User;\n    } catch ( e ) {\n        console.log( e );\n        return undefined;\n    }\n};\n\nexport const saveUser = ( user: User ) => {\n    try {\n        const serializedObject = cipher( JSON.stringify( user ) );\n        localStorage.setItem( \"user\", serializedObject );\n    } catch ( e ) {\n        console.log( e );\n    }\n};\n\nexport const removeSavedUser = () => {\n    try {\n        localStorage.removeItem( \"user\" );\n    } catch ( e ) {\n        console.log( e );\n    }\n};\n\nexport const useResponsive = () => {\n    return React.useContext( ResponsiveContext );\n};","import { createAsyncThunk, createSlice, } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nimport { Token, User, UserState, UserSuccessTypes } from './types';\nimport appconfig from '../../appconfig';\nimport { isFulfilledAction, isPendingAction, isRejectedAction, loadUser, removeSavedUser, saveUser, Status } from '../../globals';\nimport { RootState } from '../store';\naxios.interceptors.request.use( req => { console.log( req ); return req; } );\n//////////////////////////////////////////////////////////////\n// ACTIONS\nexport const login = createAsyncThunk<{ user: User, confirmed: boolean; success: UserSuccessTypes; }, { username: string; password: string; }>( 'user/login',\n    async ( { username, password }, thunkAPI ) => {\n        const response = await axios.post( `${ appconfig.baseUrl }/user/login`,\n            {\n                username,\n                password\n            } )\n            .then( ( response ) => { console.log( response ); return response.data; } )\n            .catch( ( err ) => { console.log( err ); return { type: err.message }; } );\n\n\n        if ( response.type === \"USER_LOGGED_IN\" ) {\n            const user: User = {\n                userId: response.payload.user_id,\n                username: response.payload.username,\n                firstName: response.payload.first_name,\n                lastName: response.payload.last_name,\n                email: response.payload.email,\n                phoneNumber: response.payload.phone_number,\n                status: response.payload.status,\n                token: response.payload.token\n            };\n            return { user, confirmed: response.payload.enabled, success: response.type };\n        } else return thunkAPI.rejectWithValue( response.type );\n    }\n);\n\nexport const createUser = createAsyncThunk<{ success: UserSuccessTypes; }, { user: User; password: string; confirmPassword: string; }>( 'user/createUser',\n    async ( { user, password, confirmPassword }, thunkAPI ) => {\n        const response = await axios.post( `${ appconfig.baseUrl }/user/create`,\n            {\n                username: user.username,\n                first_name: user.firstName,\n                last_name: user.lastName,\n                email: user.email,\n                phone_number: user.phoneNumber,\n                password,\n                confirm_pass: confirmPassword,\n                status: Status.SAFE\n            } )\n            .then( ( response ) => { console.log( response ); return response.data; } )\n            .catch( ( err ) => { console.log( err ); return { type: err.message }; } );\n\n\n\n        if ( response.type === UserSuccessTypes.USER_CREATED )\n            return { success: response.type };\n        else return thunkAPI.rejectWithValue( response.type );\n    }\n);\n\nexport const confirmEmail = createAsyncThunk<{ success: UserSuccessTypes; }, string>( 'user/confirmEmail',\n    async ( token, thunkAPI ) => {\n        const response = await axios.get( `${ appconfig.baseUrl }/user/confirmUser?token=${ token }`, {} )\n            .then( ( response ) => { console.log( response ); return response.data; } )\n            .catch( err => { console.log( err ); return { type: err.message }; } );\n\n\n\n        if ( response.type === UserSuccessTypes.USER_CONFIRMED )\n            return { success: response.type };\n        else return thunkAPI.rejectWithValue( response.type );\n    }\n);\n\nexport const forgotPassword = createAsyncThunk<{ success: UserSuccessTypes; }, User>( 'user/forgotPassword',\n    async ( user, thunkAPI ) => {\n        const response = await axios.post( `${ appconfig.baseUrl }/user/forgotUser`, { username: user.username, firstName: user.firstName, lastName: user.lastName, email: user.email, phoneNumber: user.phoneNumber } )\n            .then( ( response ) => { console.log( response ); return response.data; } )\n            .catch( err => { console.log( err ); return { type: err.message }; } );\n\n\n\n        if ( response.type === UserSuccessTypes.FORGOT_EMAIL )\n            return { success: response.type };\n        else return thunkAPI.rejectWithValue( response.type );\n    }\n);\n\nexport const changeStatus = createAsyncThunk<{ success: UserSuccessTypes; status: Status; }, Status, { state: RootState; }>( 'user/changeStatus',\n    async ( status, thunkAPI ) => {\n        const user = thunkAPI.getState().user.currentUser!;\n        const response = await axios.get( `${ appconfig.baseUrl }/user/changeStatus/${ user.userId }?status=${ status }&token=${ user.token!.access_token }`,\n            {\n                headers: {\n                    \"Authorization\": `Bearer ${ user.token!.access_token }`\n                }\n            } )\n            .then( ( response ) => { console.log( response ); return response.data; } )\n            .catch( err => { console.log( err ); return { type: err.message }; } );\n\n        if ( response.type === UserSuccessTypes.STATUS_CHANGE )\n            return { success: response.type, status };\n        else return thunkAPI.rejectWithValue( response.type );\n    } );\n\nexport const checkAccess = createAsyncThunk<{ success: UserSuccessTypes; user?: User; }>( 'user/checkAccess',\n    async ( _, thunkApi ) => {\n        const user = loadUser();\n        if ( user !== undefined )\n            return { success: UserSuccessTypes.USER_LOGGED_IN, user };\n        else return thunkApi.rejectWithValue( \"NO_STATE\" );\n    } );\n\n///////////////////////////////////////////////////////////////////////////\n// STATE\nconst initialState: UserState = {\n    loggedIn: false,\n    confirmed: false,\n    loading: false,\n    currentUser: undefined,\n    error: undefined,\n    success: undefined,\n};\n\nexport const userSlice = createSlice( {\n    name: 'user',\n    initialState,\n    reducers: {\n        logout: ( state ) => {\n            state.loggedIn = false;\n            state.currentUser = undefined;\n            state.error = undefined;\n            removeSavedUser();\n        },\n        removeError: ( state ) => {\n            state.error = undefined;\n        }\n    },\n    extraReducers: builder => {\n        builder\n            .addCase( login.fulfilled, ( state, action ) => {\n                state.loggedIn = true;\n                state.currentUser = action.payload.user;\n                state.confirmed = action.payload.confirmed;\n            } )\n            .addCase( createUser.fulfilled, ( state, action ) => {\n            } )\n            .addCase( confirmEmail.fulfilled, ( state, action ) => {\n            } )\n            .addCase( forgotPassword.fulfilled, ( state, action ) => {\n            } )\n            .addCase( changeStatus.fulfilled, ( state, action ) => {\n                state.currentUser!.status = action.payload.status;\n            } )\n            .addCase( checkAccess.fulfilled, ( state, action ) => {\n                state.currentUser = action.payload.user!;\n                state.loggedIn = true;\n            } )\n            .addMatcher( isPendingAction( \"user/\" ), ( state, action ) => {\n                console.log( action.type );\n                state.loading = true;\n                state.error = undefined;\n                state.success = undefined;\n            } )\n            .addMatcher( isRejectedAction( \"user/\" ), ( state, action ) => {\n                console.log( action.type );\n                state.loading = false;\n                if ( action.payload !== \"NO_STATE\" )\n                    state.error = action.payload;\n                state.success = undefined;\n            } )\n            .addMatcher( isFulfilledAction( \"user/\" ), ( state, action ) => {\n                console.log( action.type );\n                state.loading = false;\n                state.error = undefined;\n                state.success = action.payload.success;\n                saveUser( state.currentUser! );\n            } );\n    }\n} );\n\nconst userReducer = userSlice.reducer;\n\nexport const { logout, removeError } = userSlice.actions;\n\nexport const loggedIn = ( state: RootState ) => state.user.loggedIn;\n\nexport const currentUser = ( state: RootState ) => state.user.currentUser;\n\nexport const loading = ( state: RootState ) => state.user.loading;\n\nexport const error = ( state: RootState ) => state.user.error;\n\nexport const success = ( state: RootState ) => state.user.success;\n\nexport default userReducer;\n","import { Status } from \"../../globals\";\n\nexport enum LocationSuccessTypes {\n    LOCATION_SEND = 'LOCATION_SEND'\n}\n\nexport type LocationState = {\n    success?: LocationSuccessTypes;\n    loading: boolean;\n    error?: string\n};\n\nexport type LocationType = {\n    latitude: number;\n    longitude: number;\n    altitude: number;\n    idUser: number;\n    date: number;\n    status: Status;\n};","import { Box, Form, FormField, TextInput, Button, Heading, Anchor } from 'grommet';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { loggedIn, login } from '../../state/user';\n\nexport default () => {\n    const [ username, setUsername ] = useState( '' );\n    const [ password, setPassword ] = useState( '' );\n    const dispatch = useDispatch();\n\n    const history = useHistory();\n    const connected = useSelector( loggedIn );\n\n    useEffect( () => {\n        if ( connected )\n            history.push( \"/\" );\n    }, [ connected ] );\n\n    return (\n        <Box animation={{ type: \"slideLeft\", duration: 300 }\n        }>\n            <Heading>Connexion</Heading>\n            <Form\n                onSubmit={() => { dispatch( login( { username, password } ) ); }}\n                onReset={() => { setUsername( '' ); setPassword( '' ); }}\n            >\n                <FormField name=\"username\" label=\"Pseudo\">\n                    <TextInput id=\"text-input-username\" name=\"username\" value={username} onChange={ev => setUsername( ev.target.value )} />\n                </FormField>\n                <FormField name=\"password\" label=\"Mot de passe\">\n                    <TextInput id=\"text-input-password\" name=\"password\" value={password} onChange={ev => setPassword( ev.target.value )} type=\"password\" />\n                </FormField>\n                <Link to='/forgot' >\n                    <Anchor label=\"Mot de passe oublié ?\" margin={{ vertical: \"medium\" }} />\n                </Link>\n                <Box direction=\"row\" justify=\"center\" gap=\"large\" margin={{ vertical: \"medium\" }}>\n                    <Button type=\"submit\" primary label=\"Connexion\" disabled={username === '' || password === ''} />\n                    <Button type=\"reset\" label=\"Reset\" />\n                </Box>\n            </Form>\n        </Box > );\n};\n","import { Box, Button, Heading } from 'grommet';\nimport { FormNext } from 'grommet-icons';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n    return (\n        <Box>\n            <Heading>Tous contre le Covid!</Heading>\n            <Box direction=\"row\" justify=\"center\" gap=\"large\">\n                <Link to=\"/login\">\n                    <Button label=\"Connexion\" hoverIndicator icon={<FormNext />} />\n                </Link>\n                <Link to=\"/createAccount\">\n                    <Button primary label=\"Inscription\" hoverIndicator icon={<FormNext />} />\n                </Link>\n            </Box>\n        </Box>\n    );\n};","import { Box, Button, Form, FormField, Heading, Paragraph, TextInput } from 'grommet';\nimport { FormNext } from 'grommet-icons';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { createUser, success } from '../../state/user';\nimport { UserSuccessTypes } from '../../state/user/types';\n\nexport default () => {\n    const [ username, setUsername ] = useState( '' );\n    const [ firstName, setFirstName ] = useState( '' );\n    const [ lastName, setLastName ] = useState( '' );\n    const [ password, setPassword ] = useState( '' );\n    const [ confirmPassword, setConfirmPassword ] = useState( '' );\n    const [ email, setEmail ] = useState( '' );\n    const [ phoneNumber, setPhoneNumber ] = useState( '' );\n    const created = useSelector( success );\n\n    const dispatch = useDispatch();\n\n    return (\n        <Box animation={{ type: \"slideLeft\", duration: 300 }} pad=\"large\">\n            {created === UserSuccessTypes.USER_CREATED ?\n                <Box align=\"center\" justify=\"center\" gap=\"large\" animation={{ type: \"slideLeft\", duration: 300 }}>\n                    <Heading>Informations envoyées !</Heading>\n                    <Paragraph>Veuillez vérifier votre boite mail pour confirmer votre compte.</Paragraph>\n                    <Link to=\"/\">\n                        <Button primary label=\"Retour à l'accueil\" hoverIndicator icon={<FormNext />} />\n                    </Link>\n                </Box>\n                :\n                <Box margin=\"medium\">\n                    <Heading>Créez un compte</Heading>\n                    <Form\n                        onSubmit={() => {\n                            dispatch( createUser( { user: { username, firstName, lastName, email, phoneNumber, userId: undefined }, password, confirmPassword } ) );\n                        }}\n                        onReset={() => {\n                            setUsername( '' );\n                            setPassword( '' );\n                            setFirstName( '' );\n                            setLastName( '' );\n                            setConfirmPassword( '' );\n                            setPhoneNumber( '' );\n                            setEmail( '' );\n                        }}>\n                        <FormField name=\"username\" label=\"Pseudo\">\n                            <TextInput id=\"text-input-username\" name=\"username\" value={username} onChange={ev => setUsername( ev.target.value )} />\n                        </FormField>\n                        <FormField name=\"firstName\" label=\"Prénom\">\n                            <TextInput id=\"text-input-firstName\" name=\"firstName\" value={firstName} onChange={ev => setFirstName( ev.target.value )} />\n                        </FormField>\n                        <FormField name=\"lastName\" label=\"Nom\">\n                            <TextInput id=\"text-input-firstName\" name=\"lastName\" value={lastName} onChange={ev => setLastName( ev.target.value )} />\n                        </FormField>\n                        <FormField name=\"email\" label=\"Adresse mail\">\n                            <TextInput id=\"text-input-email\" name=\"email\" value={email} onChange={ev => setEmail( ev.target.value )} />\n                        </FormField>\n                        <FormField name=\"phone\" label=\"Numéro de téléphone\">\n                            <TextInput id=\"text-input-phone\" name=\"phone\" value={phoneNumber} onChange={ev => setPhoneNumber( ev.target.value )} />\n                        </FormField>\n                        <FormField name=\"password\" label=\"Mot de passe\">\n                            <TextInput id=\"text-input-password\" name=\"password\" value={password} onChange={ev => setPassword( ev.target.value )} type=\"password\" />\n                        </FormField>\n                        <FormField name=\"confirmPassword\" label=\"Confirmer le mot de passe\">\n                            <TextInput id=\"text-input-confirm-password\" name=\"confirmPassword\" value={confirmPassword} onChange={ev => setConfirmPassword( ev.target.value )} type=\"password\" />\n                        </FormField>\n                        <Box direction=\"row\" justify=\"center\" gap=\"large\">\n                            <Button\n                                type=\"submit\"\n                                primary\n                                label=\"S'inscrire\"\n                                disabled={\n                                    username === '' ||\n                                    firstName === '' ||\n                                    lastName === '' ||\n                                    email === '' ||\n                                    phoneNumber === '' ||\n                                    confirmPassword === '' ||\n                                    password === '' ||\n                                    confirmPassword !== password\n                                }\n                            />\n                            <Button type=\"reset\" label=\"Reset\" />\n                        </Box>\n                    </Form>\n                </Box>}\n        </Box > );\n};\n","import React from 'react';\nimport { Box, Heading, Text } from 'grommet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { currentUser, loggedIn, logout } from '../state/user';\nimport { PowerShutdown } from 'grommet-icons';\n\nconst AppBar = ( props: any ) => (\n    <Box\n        tag='header'\n        direction='row'\n        align='center'\n        justify='between'\n        background='brand'\n        pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n        // elevation='medium'\n        style={{ zIndex: '1' }}\n        {...props}\n    />\n);\n\nexport default () => {\n\n    const connected = useSelector( loggedIn );\n    const user = useSelector( currentUser );\n    const dispatch = useDispatch();\n\n    return (\n        <AppBar>\n            <Heading level='3' margin='none'>\n                Alerte Covid !\n            </Heading>\n            {connected &&\n                <Box direction=\"row\" justify=\"center\" align=\"center\" gap=\"medium\">\n                    <Text>{`Bonjour, ${ user?.firstName }`}</Text>\n                    <Box\n                        responsive={false}\n                        hoverIndicator={true}\n                        background=\"brand2\"\n                        round=\"full\"\n                        pad=\"xsmall\"\n                        onClick={() => dispatch( logout() )}>\n                        <PowerShutdown />\n                    </Box>\n                </Box>}\n        </AppBar> );\n};\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { stat } from \"fs\";\nimport appconfig from \"../../appconfig\";\nimport { isFulfilledAction, isPendingAction, isRejectedAction } from \"../../globals\";\nimport { RootState } from \"../store\";\nimport { LocationState, LocationSuccessTypes, LocationType } from \"./types\";\n\n\nexport const sendLocation = createAsyncThunk<{ success: LocationSuccessTypes; }, LocationType, { state: RootState; }>( 'location/sendLocation',\n    async ( location, thunkAPI ) => {\n        const token = thunkAPI.getState().user.currentUser?.token?.access_token;\n        const response = await axios.post( `${ appconfig.baseUrl }/location`, {\n            latitude: location.latitude,\n            longitude: location.longitude,\n            user_id: location.idUser,\n            user_status: location.status,\n            date: location.date,\n            user_token: token\n        }, {\n            headers: {\n                \"Authorization\": `Bearer ${ token }`\n            }\n        } )\n            .then( response => response.data )\n            .catch( err => { console.log( err ); return { type: err.message }; } );\n        if ( response.type === LocationSuccessTypes.LOCATION_SEND )\n            return response.type;\n        else return thunkAPI.rejectWithValue( response.type );\n    } );\n\n\nconst initialState: LocationState = {\n    success: undefined,\n    loading: false,\n    error: undefined\n};\n\nconst locationSlice = createSlice( {\n    name: 'location',\n    initialState,\n    reducers: {\n        removeError: ( state ) => {\n            state.error = undefined;\n        }\n    },\n    extraReducers: builder => {\n        builder\n            .addCase( sendLocation.fulfilled, ( state, action ) => {\n                console.log( action.type );\n            } )\n            .addMatcher( isPendingAction( \"location/\" ), ( state, action ) => {\n                console.log( action.type );\n                state.loading = true;\n            } )\n            .addMatcher( isRejectedAction( \"location/\" ), ( state, action ) => {\n                console.log( action.type );\n                state.loading = false;\n                state.error = action.payload;\n            } )\n            .addMatcher( isFulfilledAction( \"location/\" ), ( state, action ) => {\n                console.log( action.type );\n                state.loading = false;\n                state.success = action.payload.success;\n            } );\n    }\n\n} );\n\nconst locationReducer = locationSlice.reducer;\n\nexport const { removeError } = locationSlice.actions;\n\nexport const success = ( state: RootState ) => state.location.success;\n\nexport const loading = ( state: RootState ) => state.location.loading;\n\nexport const error = ( state: RootState ) => state.location.error;\n\nexport default locationReducer;\n","import { Box, Heading, Image, Text, Button, Menu } from 'grommet';\nimport { FormNext, PowerReset, FormUp } from 'grommet-icons';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Colors, Status, useResponsive } from '../globals';\nimport { sendLocation } from '../state/location';\nimport { changeStatus, currentUser } from '../state/user';\n\n\nexport default () => {\n    const dispatch = useDispatch();\n    const user = useSelector( currentUser );\n    const [ longitude, setLongitude ] = useState( 0 );\n    const [ latitude, setLatitude ] = useState( 0 );\n    const [ timestamp, setTimestamp ] = useState( 0 );\n    const [ status, setStatus ] = useState<Status>( user?.status! );\n    const [ first, setFirst ] = useState( true );\n\n    useEffect( () => getLocation(), [] );\n\n    useEffect( () => {\n        !first && dispatch( changeStatus( status ) );\n        first && setFirst( false );\n    }, [ status ] );\n\n    const getLocation = () => {\n        if ( navigator.geolocation ) {\n            navigator.geolocation.getCurrentPosition( position => {\n                setLatitude( position.coords.latitude );\n                setLongitude( position.coords.longitude );\n                setTimestamp( position.timestamp );\n            } );\n        }\n    };\n\n    const responsive = useResponsive();\n\n    return (\n        <Box animation={{ type: \"slideLeft\", duration: 300 }} pad=\"medium\">\n            <Box direction=\"row\" gap=\"large\" align=\"center\" justify=\"between\" >\n                <Heading>Votre localisation</Heading>\n                <Box\n                    responsive={false}\n                    hoverIndicator={true}\n                    background=\"brand2\"\n                    round=\"full\"\n                    pad=\"xsmall\"\n                    onClick={() => getLocation()}>\n                    <PowerReset />\n                </Box>\n            </Box>\n            <Image fit=\"cover\" src={`https://open.mapquestapi.com/staticmap/v5/map?key=Rj0TSGwLALfn3RNupD0RwZ2vV2S5gcds&size=600,400&zoom=14&center=${ latitude },${ longitude }&scalebar=false&locations=${ latitude },${ longitude }|marker-${ Colors.brand }`} />\n            <Box direction={responsive === \"small\" ? 'column' : \"row\"} gap=\"large\" align=\"center\" margin={{ vertical: \"large\" }} justify=\"between\" >\n                <Box direction=\"row\" align=\"center\"\n                    round=\"large\" pad={{ left: 'medium', right: \"small\" }} responsive={false}\n                    background={status === Status.SAFE ? 'status-ok' : status === Status.CONTACT ? 'status-warning' : 'status-critical'}>\n                    <Text>Vous êtes : </Text>\n                    <Menu label={setLabel( status )} dropAlign={{ right: \"right\", bottom: \"top\" }}\n                        icon={<FormUp />}\n                        items={[\n                            { label: 'sain', onClick: () => setStatus( Status.SAFE ) },\n                            { label: 'cas contacte', onClick: () => setStatus( Status.CONTACT ) },\n                            { label: 'covidé', onClick: () => setStatus( Status.COVID ) },\n                        ]} />\n                </Box>\n                <Button primary label=\"Enregistrer\" icon={<FormNext />} size=\"large\"\n                    onClick={() => dispatch( sendLocation( {\n                        altitude: 0,\n                        date: timestamp,\n                        idUser: user!.userId!,\n                        latitude,\n                        longitude,\n                        status\n                    } ) )} />\n            </Box>\n        </Box > );\n\n};\n\nconst setLabel = ( type: Status ) => {\n    switch ( type ) {\n        case Status.CONTACT: return 'cas contacte';\n        case Status.COVID: return 'covidé';\n        case Status.SAFE: return 'sain';\n    }\n};\n\n\n","import { Box, Layer, Text } from 'grommet';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getErrorMsg } from '../globals';\n\nimport { error as user, removeError as removeErrorUser } from '../state/user';\nimport { error as location, removeError as removeErrorLocation } from '../state/location';\n\nexport default () => {\n    const errorUser = useSelector( user );\n    const errorLocation = useSelector( location );\n    const dispatch = useDispatch();\n\n    return (\n        <Box>\n            { ( errorUser || errorLocation ) && (\n                <Layer\n                    responsive={false}\n                    animation=\"slide\"\n                    onEsc={() => dispatch( errorUser ? removeErrorUser() : removeErrorLocation() )}\n                    onClickOutside={() => dispatch( errorUser ? removeErrorUser() : removeErrorLocation() )}\n                >\n                    <Box pad=\"medium\" background=\"status-error\">\n                        <Text>{getErrorMsg( errorUser ? errorUser : errorLocation! )}</Text>\n                    </Box>\n                </Layer> )}\n        </Box> );\n};\n","import { Box, Button, Heading, Paragraph } from 'grommet';\nimport { FormNext } from 'grommet-icons';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { confirmEmail, loading } from '../../state/user';\n\nexport default ( { match }: RouteComponentProps<{ token?: string; }> ) => {\n    const dispatch = useDispatch();\n    const inProgress = useSelector( loading );\n\n    useEffect( () => {\n        match.params.token !== undefined && dispatch( confirmEmail( match.params.token ) );\n    }, [ match.params.token ] );\n\n    return (\n        <Box animation={{ type: \"slideLeft\", duration: 300 }}>\n            {inProgress ?\n                <Paragraph>Nous confirmons votre compte</Paragraph>\n                :\n                <Box align=\"center\" justify=\"center\" animation={{ type: \"slideLeft\", duration: 300 }}>\n                    <Heading>Votre compte est confirmé !</Heading>\n                    <Link to=\"/login\">\n                        <Button primary label=\"Connexion\" hoverIndicator icon={<FormNext />} />\n                    </Link>\n                </Box>\n            }\n        </Box>\n    );\n\n};\n","import { Box, Layer, Text } from 'grommet';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { loading as user } from '../state/user';\nimport { loading as location } from '../state/location';\n\nexport default () => {\n\n    const inProgressUser = useSelector( user );\n    const inProgressLocation = useSelector( location );\n\n    return (\n        <Box>\n            {( inProgressLocation || inProgressUser ) && (\n                <Layer\n                    responsive={false}\n                    animation=\"slide\"\n                    position=\"top\"\n                    plain>\n                    <Box pad={{ horizontal: \"xlarge\", vertical: 'small' }} background=\"brand2\" round=\"large\" margin={{ vertical: \"xlarge\" }} elevation=\"large\">\n                        <Text size=\"medium\">Loading</Text>\n                    </Box>\n                </Layer> )\n            }\n        </Box>\n    );\n};\n","import { Box, Button, Form, FormField, Heading, Paragraph, TextInput } from 'grommet';\nimport { FormNext } from 'grommet-icons';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { forgotPassword, success } from '../../state/user';\nimport { UserSuccessTypes } from '../../state/user/types';\n\nexport default () => {\n    const dispatch = useDispatch();\n    const [ username, setUsername ] = useState( '' );\n    const emailSent = useSelector( success );\n\n    console.log( emailSent );\n    return (\n        <Box>\n            { emailSent !== UserSuccessTypes.FORGOT_EMAIL ?\n                <Box animation={{ type: \"slideLeft\", duration: 300 }\n                }>\n                    <Heading>Mot de passe oublié ?</Heading>\n                    <Form\n                        onSubmit={() => { dispatch( forgotPassword( { username, email: '', firstName: '', lastName: '', phoneNumber: '' } ) ); }}\n                        onReset={() => { setUsername( '' ); }}\n                    >\n                        <FormField name=\"username\" label=\"Pseudo\">\n                            <TextInput id=\"text-input-username\" name=\"username\" value={username} onChange={ev => setUsername( ev.target.value )} />\n                        </FormField>\n                        <Box direction=\"row\" justify=\"center\" gap=\"large\">\n                            <Button type=\"submit\" primary label=\"Envoyer\" disabled={username === ''} />\n                            <Button type=\"reset\" label=\"Reset\" />\n                        </Box>\n                    </Form>\n                </Box >\n                :\n                <Box align=\"center\" justify=\"center\" gap=\"large\" animation={{ type: \"slideLeft\", duration: 300 }}>\n                    <Heading>Informations envoyées !</Heading>\n                    <Paragraph>Veuillez vérifier votre boite mail pour votre nouveau mot de passe.</Paragraph>\n                    <Link to=\"/\">\n                        <Button primary label=\"Retour à l'accueil\" hoverIndicator icon={<FormNext />} />\n                    </Link>\n                </Box>\n            }\n        </Box>\n    );\n};","import React, { useEffect, useLayoutEffect } from 'react';\nimport { Box, Grommet } from 'grommet';\nimport { BrowserRouter as Router, Redirect, Route, Switch, useHistory } from 'react-router-dom';\nimport LoginScreen from './components/user/LoginScreen';\nimport WelcomeScreen from './components/WelcomeScreen';\nimport CreateAccountScreen from './components/user/CreateAccountScreen';\nimport Navbar from './components/Navbar';\nimport MainScreen from './components/MainScreen';\nimport UserError from './components/Error';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { checkAccess, loggedIn } from './state/user';\nimport ConfirmAccountScreen from './components/user/ConfirmAccountScreen';\nimport UserLoading from './components/Loading';\nimport { Colors } from './globals';\nimport ForgotPasswordScreen from './components/user/ForgotPasswordScreen';\nimport { loading } from './state/location';\n\nconst theme = {\n    global: {\n        colors: { ...Colors },\n        font: {\n            family: 'Roboto',\n            size: '18px',\n            height: '20px',\n        },\n    },\n};\n\n\n\nexport default () => {\n    const dispatch = useDispatch();\n    const connected = useSelector( loggedIn );\n\n    useLayoutEffect( () => {\n        dispatch( checkAccess() );\n    }, [] );\n\n\n    return (\n        <Router basename='/Projet_IWA_Front'>\n            <Grommet {...{ theme }} full>\n                <Box fill >\n                    <Navbar />\n                    <Box direction='row' flex overflow=\"auto\">\n                        <Box flex align='center' justify='center'>\n                            <UserLoading />\n                            <UserError />\n                            <Switch >\n                                <Route exact path=\"/\" component={!connected ? WelcomeScreen : MainScreen} />\n                                <Route path=\"/login\" component={LoginScreen} />\n                                <Route path=\"/createAccount\" component={CreateAccountScreen} />\n                                <Route exact path=\"/confirmAccount\" component={ConfirmAccountScreen} />\n                                <Route path=\"/confirmAccount/:token\" component={ConfirmAccountScreen} />\n                                <Route path=\"/forgot\" component={ForgotPasswordScreen} />\n                            </Switch>\n                        </Box>\n                    </Box>\n                </Box>\n            </Grommet >\n        </Router>\n    );\n};\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport user from './user';\nimport location from './location';\n\n/**\n * Combine reducers created manually or by createSlice to create a global state.\n * https://redux-toolkit.js.org/api/configureStore\n */\nexport const store = configureStore( {\n    reducer: {\n        user,\n        location\n    },\n} );\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './state/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById( 'root' )\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}